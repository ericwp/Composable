using System;
using System.Collections.Generic;
using System.Linq;
using Composable.DDD;
using Composable.Persistence.DocumentDb;
using Composable.Persistence.EventStore.Query.Models.Generators;
using Composable.System.Linq;
using Composable.SystemExtensions.Threading;
using FluentAssertions;

// ReSharper disable UnusedMember.Global

namespace Composable.CQRS.Tests.CQRS.Query.Models.AutoGenerated
{
    public class QueryModelGeneratingDocumentDbReaderTests : nspec
    {
        public void given_two_cats_with_ids_1_and_2_and_two_dogs_with_ids_3_and_4()
        {
            IDocumentDbReader reader = null;
            var cat1Id = Guid.Parse("00000000-0000-0000-0000-000000000001");
            var cat2Id = Guid.Parse("00000000-0000-0000-0000-000000000002");
            var dog1Id = Guid.Parse("00000000-0000-0000-0000-000000000003");
            var dog2Id = Guid.Parse("00000000-0000-0000-0000-000000000004");

            before = () => reader = new QueryModelGeneratingDocumentDbReader(new SingleThreadUseGuard(),
                                                                             new List<IQueryModelGenerator> {new DogGenerator(), new CatGenerator()});
            context[$"when you Get a cat with id {cat1Id}"] =
                () =>
                {
                    Cat aCat = null;
                    act = () => aCat = reader.Get<Cat>(cat1Id);
                    it[$"the fetched cat has the id: {cat1Id}"] = () => aCat.Id.Should().Be(cat1Id);
                    context[$"when you Get a cat with id {cat1Id} again"] =
                        () =>
                        {
                            Cat theSameCat = null;
                            act = () => theSameCat = reader.Get<Cat>(cat1Id);
                            it[$"the cat has the id: {cat1Id}"] = () => theSameCat.Id.Should().Be(cat1Id);
                            it["both fetched cats are the same instance"] = () => aCat.Should().Be(theSameCat);
                        };
                };

            context[$"when you Get a Dog with id {dog1Id}"] =
                () =>
                {
                    Dog aDog = null;
                    act = () => aDog = reader.Get<Dog>(dog1Id);
                    it[$"the fetched dog has the id: {dog1Id}"] = () => aDog.Id.Should().Be(dog1Id);
                    context[$"when you Get a dog with id {dog1Id} again"] =
                        () =>
                        {
                            Dog theSameDog = null;
                            act = () => theSameDog = reader.Get<Dog>(dog1Id);
                            it[$"the fetched dog has the id: {dog1Id}"] = () => theSameDog.Id.Should().Be(dog1Id);
                            it["both fetched dogs are the same instance"] = () => aDog.Should().Be(theSameDog);
                        };
                };

            context[$"when you Get an animal with id {dog1Id}"] =
                () =>
                {
                    Animal aDog = null;
                    act = () => aDog = reader.Get<Animal>(dog1Id);
                    it["the fetched animal is a Dog"] = () => aDog.Should().BeOfType<Dog>();
                    it[$"the Dog has the id: {dog1Id}"] = () => aDog.Id.Should().Be(dog1Id);
                    context[$"when you Get an animal with id {dog1Id} again"] =
                        () =>
                        {
                            Animal theSameDog = null;
                            act = () => theSameDog = reader.Get<Animal>(dog1Id);
                            it["the fetched animal is a Dog"] = () => theSameDog.Should().BeOfType<Dog>();
                            it[$"the dog has the id: {dog1Id}"] = () => theSameDog.Id.Should().Be(dog1Id);
                            it["both fetched dogs are the same instance"] = () => aDog.Should().Be(theSameDog);
                        };
                };
            context["when you Get animals with ids 1,2,3,4"] =
                () =>
                {
                    IEnumerable<Animal> animals = null;
                    act = () => animals = reader.Get<Animal>(Seq.Create(cat1Id, cat2Id, dog1Id, dog2Id));
                    it["there are 4 animals returned"] = () => animals.Should().HaveCount(4);
                    it["there is a cat with id 1"] = () => animals.OfType<Cat>().Where(cat => cat.Id == cat1Id).Should().HaveCount(1);
                    it["there is a cat with id 2"] = () => animals.OfType<Cat>().Where(cat => cat.Id == cat2Id).Should().HaveCount(1);
                    it["there is a dog with id 3"] = () => animals.OfType<Dog>().Where(cat => cat.Id == dog1Id).Should().HaveCount(1);
                    it["there is a dog with id 4"] = () => animals.OfType<Dog>().Where(cat => cat.Id == dog2Id).Should().HaveCount(1);
                    context["when you Get animals with ids 1,2,3,4 again"] =
                        () =>
                        {
                            IEnumerable<Animal> theSameAnimals = null;
                            act = () => theSameAnimals = reader.Get<Animal>(Seq.Create(cat1Id, cat2Id, dog1Id, dog2Id));
                            it["there are 4 animals returned"] = () => theSameAnimals.Should().HaveCount(4);
                            it["the returned animals are the same instances as from the last call"] = () => animals.Should().Equal(theSameAnimals);
                        };
                };
        }

        class Animal : PersistentEntity<Animal>
        {
            protected Animal(Guid id) : base(id) {}
        }

        class Dog : Animal
        {
            public Dog(Guid id) : base(id) {}
        }

        class Cat : Animal
        {
            public Cat(Guid id) : base(id) {}
        }

        class DogGenerator : IQueryModelGenerator<Dog>
        {
            public Dog TryGenerate(Guid id)
            {
                var intId = int.Parse(id.ToString().Last().ToString());
                if(intId > 4 || intId < 3)
                {
                    return null;
                }
                return new Dog(id);
            }
        }

        class CatGenerator : IQueryModelGenerator<Cat>
        {
            public Cat TryGenerate(Guid id)
            {
                var intId = int.Parse(id.ToString().Last().ToString());
                if(intId > 2)
                {
                    return null;
                }
                return new Cat(id);
            }
        }
    }
}
