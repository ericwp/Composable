<ProjectConfiguration>
  <AutoDetectNugetBuildDependencies>true</AutoDetectNugetBuildDependencies>
  <BuildPriority>1000</BuildPriority>
  <CopyReferencedAssembliesToWorkspace>true</CopyReferencedAssembliesToWorkspace>
  <ConsiderInconclusiveTestsAsPassing>false</ConsiderInconclusiveTestsAsPassing>
  <PreloadReferencedAssemblies>false</PreloadReferencedAssemblies>
  <AllowDynamicCodeContractChecking>true</AllowDynamicCodeContractChecking>
  <AllowStaticCodeContractChecking>false</AllowStaticCodeContractChecking>
  <AllowCodeAnalysis>false</AllowCodeAnalysis>
  <IgnoreThisComponentCompletely>false</IgnoreThisComponentCompletely>
  <RunPreBuildEvents>false</RunPreBuildEvents>
  <RunPostBuildEvents>false</RunPostBuildEvents>
  <PreviouslyBuiltSuccessfully>true</PreviouslyBuiltSuccessfully>
  <InstrumentAssembly>true</InstrumentAssembly>
  <PreventSigningOfAssembly>false</PreventSigningOfAssembly>
  <AnalyseExecutionTimes>true</AnalyseExecutionTimes>
  <DetectStackOverflow>true</DetectStackOverflow>
  <IncludeStaticReferencesInWorkspace>true</IncludeStaticReferencesInWorkspace>
  <DefaultTestTimeout>60000</DefaultTestTimeout>
  <UseBuildConfiguration></UseBuildConfiguration>
  <UseBuildPlatform></UseBuildPlatform>
  <ProxyProcessPath></ProxyProcessPath>
  <UseCPUArchitecture>AutoDetect</UseCPUArchitecture>
  <MSTestThreadApartmentState>STA</MSTestThreadApartmentState>
  <BuildProcessArchitecture>x86</BuildProcessArchitecture>
  <IgnoredTests>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreTest.ShouldNotCacheEventsSavedDuringFailedTransactionEvenIfReadDuringSameTransaction</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.SqlServerEventStoreTests.EventStoreTests:StreamEventsSinceReturnsWholeEventLogWhenFetchingALargeNumberOfEvents_EnsureBatchingDoesNotBreakThings</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryMigrationsPerformanceTest.A_ten_thousand_events_large_aggregate_with_four_migrations_should_load_cached_in_less_than_50_milliseconds</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerMigrationsPerformanceTest.A_ten_thousand_events_large_aggregate_with_four_migrations_should_load_cached_in_less_than_50_milliseconds</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerMigrationsPerformanceTest.A_ten_thousand_events_large_aggregate_with_four_migrations_should_load_cached_in_less_than_20_milliseconds</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryMigrationsPerformanceTest.A_hundred_thousand_events_large_aggregate_with_four_migrations_should_load_cached_in_less_than_130_milliseconds</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SingleAggregateInstanceEventStreamMutatorPerformanceTest_Given_a_10000_events_large_aggregate.Aggregate_should_raise_100_000_events_in_less_than_150_milliseconds</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SingleAggregateInstanceEventStreamMutatorPerformanceTest_Given_a_10000_events_large_aggregate.Calling_before_after_or_replace_1000_000_times_takes_less_than_60_milliseconds</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SingleAggregateInstanceEventStreamMutatorPerformanceTest_Given_a_10000_events_large_aggregate.With_four_migrations_mutation_that_all_actually_changes_things_migration_takes_less_than_15_milliseconds</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SingleAggregateInstanceEventStreamMutatorPerformanceTest_Given_a_10000_events_large_aggregate.With_four_migrations_that_change_nothing_mutation_takes_less_than_10_milliseconds</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.SqlServerEventStoreTests.DoesNotMixUpEventsFromDifferentStores</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:CanSaveAndLoadAggregate</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1_then_E5_before_E4_then_replace_E4_with_E6_then_replace_Ef_with_E7_then_insert_E8_after_E7</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2_E3_then_an_unrelated_migration_v2</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.Serializes_access_to_an_aggregate_so_that_concurrent_transactions_succeed_even_if_history_has_been_read_outside_of_modifying_transactions</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E2_after_E1_at_end_of_stream</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreTest.Does_not_call_db_in_constructor</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2_then_irrelevant_migration</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Base_class_method_should_detect_incorrect_type_order</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1_then_E5_before_E4</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:CanLoadSpecificVersionOfAggregate</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1_then_E5_before_E4_then_replace_E4_with_E6</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1_then_E5_before_E4_2</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:EventsAreDeletedWhenNotAUnitOfWorkParticipant</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:ReturnsSameInstanceOnLoadAfterSave</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:DoesNotExplodeWhenSavingMoreThan10Events</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:ResetsAggregatesAfterSaveChanges</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:When_deleting_and_then_fetching_an_aggregates_history_the_history_should_be_gone</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:ReturnsSameInstanceOnLoadAfterSave</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:EventsAreDeletedWhenNotAUnitOfWorkParticipant</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1_then_E5_before_E3</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:ReturnsSameInstanceOnRepeatedLoads</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:ResetsAggregatesAfterSaveChanges</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2_E3_2</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2_E3</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_before_E1</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:DoesNotUpdateAggregatesLoadedViaSpecificVersion</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreTests.EventStoreTests:GetListOfAggregateIds</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:EventsAreDeletedWhenUnitOfWorkIsCommitted</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E2_after_E1</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1_then_E5_before_E4</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:DoesNotExplodeWhenSavingMoreThan10Events</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.SqlServerEventStoreTests.EventStoreTests:StreamEventsSinceReturnsWholeEventLogWhenFromEventIdIsNull</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:When_fetching_history_from_the_same_instance_after_updating_an_aggregate_the_fetched_history_includes_the_new_events</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:When_fetching_and_deleting_an_aggregate_then_fetching_history_again_the_history_should_be_gone</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1_then_E5_before_E3_2</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.SqlServerEventStoreTests.EventStoreTests:GetListOfAggregateIdsUsingBaseEventType</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:TracksAndUpdatesLoadedAggregates</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Given_Ec1_E1_before_E1_E2_after_E2_E3_throws_NonIdempotentMigrationDetectedException</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:EventsArePublishedOnSaveChangesAndThisInteractsWithUnitOfWorkParticipations</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1_then_E5_before_E3_2</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2_E3_2</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreTests.EventStoreTests:StreamEventsSinceReturnsWholeEventLogWhenFromEventIdIsNull</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2_E3_then_E2_with_E4</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:CanSaveAndLoadAggregate</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:WhenFetchingAggregateThatDoesNotExistNoSuchAggregateExceptionIsThrown</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:When_fetching_and_deleting_an_aggregate_then_fetching_history_again_the_history_should_be_gone</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:When_deleting_and_then_fetching_an_aggregates_history_the_history_should_be_gone</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreTests.EventStoreTests:StreamEventsSinceReturnsWholeEventLogWhenFetchingALargeNumberOfEvents_EnsureBatchingDoesNotBreakThings</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2_then_irrelevant_migration</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.Serializes_access_to_an_aggregate_so_that_concurrent_transactions_succeed</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreTest.ShouldCacheEventsBetweenInstancesTransaction</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreTests.EventStoreTests:GetListOfAggregateIdsUsingBaseEventType</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1_then_E5_before_E4_then_replace_E4_with_E6</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:ThrowsWhenAttemptingToSaveExistingAggregate</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2_E3</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:TracksAndUpdatesLoadedAggregates</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:EventsAreDeletedWhenUnitOfWorkIsCommitted</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:WhenFetchingAggregateThatDoesNotExistNoSuchAggregateExceptionIsThrown</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2_E3_then_E2_with_E4</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1_then_E5_before_E3</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_before_E1</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:ThrowsWhenAttemptingToSaveExistingAggregate</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2_at_end_of_stream</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreTests.EventStoreTests:DeleteEventsDeletesTheEventsForOnlyTheSpecifiedAggregate</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Given_Ec1_E1_before_E1_E2_after_E2_E3_throws_NonIdempotentMigrationDetectedException</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:EventsArePublishedOnSaveChangesAndThisInteractsWithUnitOfWorkParticipations</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:ThrowsIfUsedByMultipleThreads</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.SqlServerEventStoreTests.EventStoreTests:GetListOfAggregateIds</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1_then_E5_before_E4_2</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:DoesNotUpdateAggregatesLoadedViaSpecificVersion</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E3_E4_before_E1_then_E5_before_E4_then_replace_E4_with_E6_then_replace_Ef_with_E7_then_insert_E8_after_E7</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2_at_end_of_stream</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:CanLoadSpecificVersionOfAggregate</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:AggregateCannotBeRetreivedAfterBeingDeleted</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:ReturnsSameInstanceOnRepeatedLoads</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:AggregateCannotBeRetreivedAfterBeingDeleted</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.SqlServerEventStoreTests.EventStoreTests:DeleteEventsDeletesTheEventsForOnlyTheSpecifiedAggregate</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.InMemoryEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E2_after_E1</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:DeletingAnAggregateDoesNotPreventEventsForItFromBeingRaised</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Replacing_E1_with_E2_E3_then_an_unrelated_migration_v2</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Base_class_method_should_detect_incorrect_type_order</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:DeletingAnAggregateDoesNotPreventEventsForItFromBeingRaised</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.InMemoryEventStoreSessionTests.EventStoreSessionTests:ThrowsIfUsedByMultipleThreads</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.Sql.SqlServerEventStoreSessionTests.EventStoreSessionTests:When_fetching_history_from_the_same_instance_after_updating_an_aggregate_the_fetched_history_includes_the_new_events</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.CQRS.EventSourcing.EventRefactoring.Migrations.SqlServerEventStoreEventStreamMutatorTests.EventStreamMutatorTests:Inserting_E2_after_E1_at_end_of_stream</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:ThrowsExceptionWhenAttemptingToDeleteNonExistingValue</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:AddingAndRemovingObjectInUnitOfWorkResultsInNoObjectBeingSaved</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:GetHandlesSubTyping</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:CallingSaveWithAnInteraceAsTypeParameterDoesNotExplode</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:AddingRemovingAndAddingObjectInUnitOfWorkResultsInNoObjectBeingSaved</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:DeletingAllObjectsOfATypeLeavesObjectOfInheritingTypes</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:CanSaveAndLoadAggregate</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.CanGetDocumentOfPreviouslyUnKnownClassAddedByAnotherDocumentDBInstance</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:HandlesHashSets</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:FetchesAllinstancesPerType</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:HandlesHashSetsInObjects</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:ReturnsSameInstanceOnLoadAfterSave</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:GetAllWithIdsReturnsTheSameInstanceForAnyPreviouslyFetchedDocuments</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:TracksAndUpdatesLoadedAggregates</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:ThrowsIfUsedByMultipleThreads</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:ThrowsIfUsedByMultipleHttpRequests</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:GetByIdsShouldReturnOnlyMatchingResultEvenWhenMoreResultsAreInTheCache</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:GetAllWithIdsReturnsAsManyResultsAsPassedIds</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:LoadingRemovingAndAddingObjectInUnitOfWorkResultsInObjectBeingSaved</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:AddingAndRemovingObjectResultsInNoObjectBeingSaved</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:HandlesDeletesOfInstancesAlreadyLoaded</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:ObjectsWhoseKeysDifferOnlyByTrailingSpacesTrailingWhiteSpaceCaseAreConsideredTheSameObjectForCompatabilityWithSqlServer</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:HandlesDeletesOfInstancesNotYetLoaded</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:GetAllWithIdsThrowsNoSuchDocumentExceptionExceptionIfAnyIdIsMissing</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:ObjectsWhoseKeysDifferOnlyByCaseAreConsideredTheSameObjectForCompatabilityWithSqlServer</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:RepeatedlyAddingAndRemovingObjectResultsInNoObjectBeingSaved</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.CanGetAllDocumentOfPreviouslyUnKnownClassAddedByAnotherDocumentDBInstance</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:ThrowsWhenAttemptingToSaveExistingAggregate</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:DeletingAllObjectsOfATypeLeavesNoSuchObjectsInTheDBButLeavesOtherObjectsInPlaceAndReturnsTheNumberOfDeletedObjects</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:HandlesAValueBeingAddedAndDeletedDuringTheSameSession</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:HandlesInstancesOfDifferentTypesWithTheSameId</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:ThrowsExceptionIfYouTryToSaveAnIHasPersistentIdentityWithNoId</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:GetAllIdsShouldOnlyReturnResultsWithTheGivenType</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:ReturnsSameInstanceOnRepeatedLoads</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:CanSaveAndLoadAggregateForUpdate</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:GetAllHandlesSubTyping</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.DocumentDbTests:TryingToFetchNonExistentItemDoesNotCauseSessionToTryAndAddItWithANullInstance</TestName>
    </NamedTestSelector>
    <NamedTestSelector>
      <TestName>CQRS.Tests.KeyValueStorage.Sql.SqlDocumentDbTests.CanGetAllDocumentOfPreviouslyUnKnownClassAddedByAnotherDocumentDBInstanceById</TestName>
    </NamedTestSelector>
  </IgnoredTests>
  <HiddenWarnings>LongTestTimesWithoutParallelExecution;CopyReferencedAssembliesToWorkspaceIsOn</HiddenWarnings>
</ProjectConfiguration>