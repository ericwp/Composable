using System;
using System.Linq;
using Composable.CQRS.EventHandling;
using Composable.CQRS.EventSourcing;
using Composable.KeyValueStorage.AutoGenerated;
using Composable.System.Linq;

namespace AccountManagement.UI.QueryModels.Generators
{
    public abstract class SingleAggregateDocumentGenerator<TImplementer, TViewModel, TEvent, TSession> : IDocumentGenerator<TViewModel>
        where TImplementer : SingleAggregateDocumentGenerator<TImplementer, TViewModel, TEvent, TSession>
        where TSession : IEventStoreReader
        where TEvent : IAggregateRootEvent
        where TViewModel : class, ISingleAggregateQueryModel, new()
    {
        private readonly CallMatchingHandlersInRegistrationOrderEventDispatcher<TEvent> _eventDispatcher = new CallMatchingHandlersInRegistrationOrderEventDispatcher<TEvent>();
        protected readonly TSession Session;
        protected TViewModel Model { get; set; }

        protected SingleAggregateDocumentGenerator(TSession session)
        {
            Session = session;
        }

        ///<summary>Registers handlers for the incoming events. All matching handlers will be called in the order they were registered.</summary>
        protected CallMatchingHandlersInRegistrationOrderEventDispatcher<TEvent>.RegistrationBuilder RegisterHandlers()
        {
            return _eventDispatcher.RegisterHandlers();
        }

        public TViewModel TryGenerate(object id)
        {
            var queryModel = new TViewModel();
            Model = queryModel;
            var history = Session.GetHistory((Guid)id).Cast<TEvent>();
            history.ForEach(_eventDispatcher.Dispatch);
            Model = null;
            return queryModel;
        }
    }
}