using System;
using System.Linq;
using AccountManagement.Domain.Events;
using AccountManagement.Domain.Events.PropertyUpdated;
using Composable.CQRS.EventHandling;
using Composable.CQRS.EventSourcing;
using Composable.KeyValueStorage.AutoGenerated;
using Composable.System.Linq;

namespace AccountManagement.UI.QueryModels.Generators
{
    public class RequestQueryModelGenerator : IDocumentGenerator<AccountQueryModel>
    {
        private readonly IEventStoreReader _eventStoreReader;

        public RequestQueryModelGenerator(IEventStoreReader eventStoreReader)
        {
            _eventStoreReader = eventStoreReader;

        }

        public AccountQueryModel TryGenerate(object id)
        {
            var eventDispatcher = new CallMatchingHandlersInRegistrationOrderEventDispatcher<IAccountEvent>();
            
            var account = new AccountQueryModel();
            eventDispatcher.RegisterHandlers()
                .For<IAccountEmailPropertyUpdatedEvent>(e => account.Email = e.Email )
                .For<IAccountPasswordPropertyUpdateEvent>(e => account.Password = e.Password );

            var history = _eventStoreReader.GetHistory((Guid)id).Cast<IAccountEvent>();
            history.ForEach(eventDispatcher.Dispatch);

            return account;
        }
    }
}